{"componentChunkName":"component---src-templates-blog-template-js","path":"/coding-test-1/","result":{"data":{"cur":{"id":"91217089-645e-5513-a90f-f61fc7538a08","html":"<br/>\n<h2 id=\"코딩-테스트용-js-빠른-출력\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-js-%EB%B9%A0%EB%A5%B8-%EC%B6%9C%EB%A0%A5\" aria-label=\"코딩 테스트용 js 빠른 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩 테스트용 JS 빠른 출력</h2>\n<ul>\n<li>\n<p>JS로 코딩 테스트 문제를 풀 때, 출력 과정만으로 시간 초과를 받을 때가 있다.</p>\n</li>\n<li>\n<p>출력 시간을 단축하기 위한 방법</p>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n여러 출력 결과를 한 줄에 하나씩 출력할 때 매번 console.log()를 실행하지 않고,\n하나의 문자열에 결과를 저장해서 한꺼번에 출력하는 것이 대개 더 빠르게 수행됨\n*/</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    answer <span class=\"token operator\">+=</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//문자열로 변환하여 기록</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<br/>\n<h2 id=\"코딩-테스트용-js-기본-입력---fs-모듈\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-js-%EA%B8%B0%EB%B3%B8-%EC%9E%85%EB%A0%A5---fs-%EB%AA%A8%EB%93%88\" aria-label=\"코딩 테스트용 js 기본 입력   fs 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩 테스트용 JS 기본 입력 - fs 모듈</h2>\n<ul>\n<li>\n<p>입력 데이터가 텍스트 파일 형태로 주어지는 경우, 파일 시스템 모듈을 사용한다.</p>\n</li>\n<li>\n<p>예를 들어 /dev/stdin 파일에 적힌 텍스트를 읽어오는 경우, 다음과 같이 코드를 작성한다.</p>\n</li>\n<li>\n<p>기능: 전체 텍스트를 읽어 온 뒤에, 줄바꿈 기호를 기준으로 구분하여 리스트로 변환하기</p>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// readline 모듈보다는 fs를 이용해 파일 전체를 읽어 들여 처리하기</span>\n<span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/stdin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//let input = fs.readFileSync('input.txt').toString().split('\\n');</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"코딩-테스트용-js-기본-입력---readline-모듈\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-js-%EA%B8%B0%EB%B3%B8-%EC%9E%85%EB%A0%A5---readline-%EB%AA%A8%EB%93%88\" aria-label=\"코딩 테스트용 js 기본 입력   readline 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩 테스트용 JS 기본 입력 - readline 모듈</h2>\n<ul>\n<li>한 줄씩 입력을 받아서 처리하여 정답을 출력할 때는 readline 모듈을 사용할 수 있다.</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//콘솔 입력 창에서 줄바꿈(enter)를 입력할 때마다 호출</span>\n    input<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//콘솔 입력 창에서 ctrl+c 혹은 ctrl+d 를 입력할 때마다 호출(입력의 종료)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"arrayprototypereduce\" style=\"position:relative;\"><a href=\"#arrayprototypereduce\" aria-label=\"arrayprototypereduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.prototype.reduce()</h2>\n<ul>\n<li>배열의 모든 원소에 대해 특정한 연산을 순차적으로 적용할 때 reduce()를 사용한다.</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/*\nreduce() 메서드는 배열의 각 요소에 대해 reducer 함수를 실행한 뒤에 하나의 결과를 반환한다.\nreducer의 형태 : (accumulater, currentValue) => (반환값)\n- 배열의 각 원소를 하나씩 확인하며, 각 원소는 currentValue에 해당한다.\n- 반환값은 그 이후의 원소에 대하여 accumulater에 저장된다.\n*/</span>\n\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//minValue 구하기 예제</span>\n<span class=\"token keyword\">let</span> minValue <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>minValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\n\n<span class=\"token comment\">//원소의 합계 구하기 예제</span>\n<span class=\"token keyword\">let</span> summary <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//28</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"배열-초기화-방법\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-label=\"배열 초기화 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 초기화 방법</h2>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token comment\">// 직접 값을 설정하여 초기화</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//길이가 5이고 모든 원소의 값이 0인 배열 초기화</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"집합-자료형\" style=\"position:relative;\"><a href=\"#%EC%A7%91%ED%95%A9-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"집합 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>집합 자료형</h2>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">let</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//집합 객체 생성</span>\n\n<span class=\"token comment\">// 여러 개의 원소 삽입</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">원소 개수</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mySet<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//중복은 제외해서 3개</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">원소 7을 포함하는가? </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mySet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//원소 5 제거</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//원소를 하나씩 출력</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> mySet<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"소수점-아래-특정-자리에서-반올림\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%88%98%EC%A0%90-%EC%95%84%EB%9E%98-%ED%8A%B9%EC%A0%95-%EC%9E%90%EB%A6%AC%EC%97%90%EC%84%9C-%EB%B0%98%EC%98%AC%EB%A6%BC\" aria-label=\"소수점 아래 특정 자리에서 반올림 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소수점 아래 특정 자리에서 반올림</h2>\n<ul>\n<li>실수를 출력할 때 소수점 아래 특정 자리에서 반올림 할 수 있다.</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token comment\">// 특정 실수에 대하여 toFixed()를 이용해 소수점 아래 둘째 자리까지 출력</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123.456</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"filter\" style=\"position:relative;\"><a href=\"#filter\" aria-label=\"filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>filter()</h2>\n<ul>\n<li>filter() 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환한다.</li>\n</ul>\n<br/>\n<blockquote>\n<p>코딩 테스트에서 배열 중 요소를 필터링 해야할 때 사용함</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> filtered <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// filtered 는 [12, 130, 44]</span>\n\n\n<span class=\"token keyword\">let</span> lost_student <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nlost_student <span class=\"token operator\">=</span> lost_student<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">!==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// lost_student 배열 요소 중  5가 아닌거 필터링 해서 재배열</span>\n</code></pre></div>\n<br/>\n<br/>\n<h2 id=\"includes\" style=\"position:relative;\"><a href=\"#includes\" aria-label=\"includes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>includes()</h2>\n<ul>\n<li>includes() 메서드는 배열이 특정 요소를 포함하고 있는지 판별한다.</li>\n</ul>\n<br/>\n<blockquote>\n<p>코딩 테스트에서 배열 중 요소를 포함하고 있는지 판별할 때 사용함</p>\n</blockquote>\n<br/>\n<blockquote>\n<p>참고: 문자나 문자열을 비교할 때, includes()는 대소문자를 구분한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Expected output: true</span>\n\n<span class=\"token keyword\">const</span> pets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pets<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Expected output: true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pets<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Expected output: false</span>\n\n<span class=\"token comment\">//reserve,lost 는 배열</span>\n <span class=\"token keyword\">let</span> reserve_student <span class=\"token operator\">=</span> reserve<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>lost<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">// reserve를 필터링한다 lost 배열 중 reserve배열의 요소를 가지고 있지 않은 애들을 배열로 만들어서 sort함</span>\n\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-js-%EB%B9%A0%EB%A5%B8-%EC%B6%9C%EB%A0%A5\">코딩 테스트용 JS 빠른 출력</a></li>\n<li><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-js-%EA%B8%B0%EB%B3%B8-%EC%9E%85%EB%A0%A5---fs-%EB%AA%A8%EB%93%88\">코딩 테스트용 JS 기본 입력 - fs 모듈</a></li>\n<li><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-js-%EA%B8%B0%EB%B3%B8-%EC%9E%85%EB%A0%A5---readline-%EB%AA%A8%EB%93%88\">코딩 테스트용 JS 기본 입력 - readline 모듈</a></li>\n<li><a href=\"#arrayprototypereduce\">Array.prototype.reduce()</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%A9%EB%B2%95\">배열 초기화 방법</a></li>\n<li><a href=\"#%EC%A7%91%ED%95%A9-%EC%9E%90%EB%A3%8C%ED%98%95\">집합 자료형</a></li>\n<li><a href=\"#%EC%86%8C%EC%88%98%EC%A0%90-%EC%95%84%EB%9E%98-%ED%8A%B9%EC%A0%95-%EC%9E%90%EB%A6%AC%EC%97%90%EC%84%9C-%EB%B0%98%EC%98%AC%EB%A6%BC\">소수점 아래 특정 자리에서 반올림</a></li>\n<li><a href=\"#filter\">filter()</a></li>\n<li><a href=\"#includes\">includes()</a></li>\n</ul>\n</div>","excerpt":"코딩 테스트용 JS 빠른 출력 JS로 코딩 테스트 문제를 풀 때, 출력 과정만으로 시간 초과를 받을 때가 있다. 출력 시간을 단축하기 위한 방법 코딩 테스트용 JS 기본 입력 - fs 모듈 입력 데이터가 텍스트 파일 형태로 주어지는 경우, 파일 시스템 모듈을 사용한다. 예를 들어 /dev/stdin 파일에 적힌 텍스트를 읽어오는 경우, 다음과 같이 코드를 작성한다. 기능: 전체 텍스트를 읽어 온 뒤에, 줄바꿈 기호를 기준으로 구분하여 리스트로 변환하기 코딩 테스트용 JS 기본 입력 - readline 모듈 한 줄씩 입력을 받아서 처리하여 정답을 출력할 때는 readline 모듈을 사용할 수 있다. Array.prototype.reduce() 배열의 모든 원소에 대해 특정한 연산을 순차적으로 적용할 때 reduce()를 사용한다. 배열 초기화 방법 집합 자료형 소수점 아래 특정 자리에서 반올림 실수를 출력할 때 소수점 아래 특정 자리에서 반올림 할 수 있다. filter() filt…","frontmatter":{"date":"May 20, 2023","title":"코딩테스트(JS)_01","categories":"코딩테스트","author":"unoung","emoji":"🖥"},"fields":{"slug":"/coding-test-1/"}},"next":{"id":"d95f4f2e-6e40-5d8a-9256-5188002e0864","html":"<br/>\n<h2 id=\"자료구조data-structure란\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0data-structure%EB%9E%80\" aria-label=\"자료구조data structure란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료구조(Data Structure)란?</h2>\n<ul>\n<li>\n<p>자료구조는 다수의 **자료(data)**를 담기 위한 구조다.</p>\n</li>\n<li>\n<p>데이터의 수가 많아질수록 효율적인 자료구조가 필요하다.</p>\n</li>\n<li>\n<p><strong>성능비교:</strong> 자료구조/알고리즘의 <strong>성능 측정 방법</strong>에 대해 이해할 필요가 있다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"1-선형-구조linear-data-structure\" style=\"position:relative;\"><a href=\"#1-%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0linear-data-structure\" aria-label=\"1 선형 구조linear data structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 선형 구조(linear data structure)</h3>\n<blockquote>\n<p>하나의 데이터 뒤에 다른 데이터가 하나 존재하는 자료구조 <br/>\n데이터가 일렬로 연속적으로 연결되어 있다.</p>\n</blockquote>\n<ul>\n<li>배열 (array)</li>\n<li>연결 리스트(linked list)</li>\n<li>스택(stack)</li>\n<li>큐(queue)</li>\n</ul>\n<br/>\n<h3 id=\"2-비선형-구조non-linear-data-structure\" style=\"position:relative;\"><a href=\"#2-%EB%B9%84%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0non-linear-data-structure\" aria-label=\"2 비선형 구조non linear data structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 비선형 구조(non-linear data structure)</h3>\n<blockquote>\n<p>하나의 데이터 뒤에 다른 데이터가 여러 개 올 수 있는 자료구조 <br/>\n데이터가 일직선상으로 연결되어 있지 않아도 된다.</p>\n</blockquote>\n<ul>\n<li>트리(tree)</li>\n<li>그래프(graph)</li>\n</ul>\n<br/>\n<h2 id=\"프로그램의-성능-측정-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"프로그램의 성능 측정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램의 성능 측정 방법</h2>\n<ul>\n<li>\n<p><strong>시간 복잡도(time complexity)</strong> : 알고리즘에 사용되는 연산횟수를 측정</p>\n</li>\n<li>\n<p><strong>공간 복잡도(space complexity)</strong> : 알고리즘에 사용되는 메모리 양을 측정</p>\n</li>\n<li>\n<p>공간을 많이 사용하는 대신 시간을 단축하는 방법이 흔히 사용된다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"big-o-표기법\" style=\"position:relative;\"><a href=\"#big-o-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"big o 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O 표기법</h3>\n<ul>\n<li>복잡도를 표현할 때는 <strong>Big-O</strong> 표기법을 사용한다.</li>\n</ul>\n<blockquote>\n<p>특정한 알고리즘이 얼마나 효율적인지 수치적으로 표현 가능 <br/>\n가장 빠르게 증가하는 항만을 고려하는 표기법이다.</p>\n</blockquote>\n<br/>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//다음 알고리즘은 𝑂(𝑛)의 시간 복잡도를 가진다.</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> summary <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  summary <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 45</span>\n\n<span class=\"token comment\">//다음 알고리즘은 𝑂(𝑛2)의 시간 복잡도를 가진다.</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> X </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i <span class=\"token operator\">*</span> j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n1 X 1= 1 \n1 X 2= 2 \n...\n9 X 8 = 72 \n9 X 9 = 81\n\n*/</span></code></pre></div>\n<br/>\n<br/>\n<ul>\n<li>일반적으로 연산횟수가 10억을 넘어가면 1초 이상의 시간이 소요된다.</li>\n</ul>\n<blockquote>\n<p>𝑛이 1,000일 때를 고려해 보자.</p>\n<ul>\n<li>𝑂(𝑛) :약1,000번의연산 <br/></li>\n<li>𝑂(𝑛𝑙𝑜𝑔𝑛) : 약 10,000번의 연산 <br/></li>\n<li>𝑂(𝑛2) : 약 1,000,000번의 연산 <br/></li>\n<li>𝑂(𝑛3) : 약 1,000,000,000번의 연산 <br/></li>\n</ul>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0data-structure%EB%9E%80\">자료구조(Data Structure)란?</a></p>\n<ul>\n<li><a href=\"#1-%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0linear-data-structure\">1. 선형 구조(linear data structure)</a></li>\n<li><a href=\"#2-%EB%B9%84%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0non-linear-data-structure\">2. 비선형 구조(non-linear data structure)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95-%EB%B0%A9%EB%B2%95\">프로그램의 성능 측정 방법</a></p>\n<ul>\n<li><a href=\"#big-o-%ED%91%9C%EA%B8%B0%EB%B2%95\">Big-O 표기법</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 20, 2023","title":"자료구조(Data Structure)","categories":"알고리즘","author":"unoung","emoji":"🖥"},"fields":{"slug":"/study-algorithms-1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://unoung.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/coding-test-1/","nextSlug":"/study-algorithms-1/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}