{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-expo-1/","result":{"data":{"cur":{"id":"d3452235-504b-5d59-886a-5fce1a8c3996","html":"<h2 id=\"expo-router란\" style=\"position:relative;\"><a href=\"#expo-router%EB%9E%80\" aria-label=\"expo router란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>expo-router란?</h2>\n<h3 id=\"1-파일기반의-라우팅\" style=\"position:relative;\"><a href=\"#1-%ED%8C%8C%EC%9D%BC%EA%B8%B0%EB%B0%98%EC%9D%98-%EB%9D%BC%EC%9A%B0%ED%8C%85\" aria-label=\"1 파일기반의 라우팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 파일기반의 라우팅</h3>\n<ul>\n<li>\n<p>expo-router는 파일기반의 라우팅으로, 파일과 디렉토리에 따라서 자동으로 경로가 생성된다</p>\n</li>\n<li>\n<p>예를 들어 ‘app/home.js’ 파일이라면 ‘/home’ 경로가 된다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"2-중괄호-대괄호\" style=\"position:relative;\"><a href=\"#2-%EC%A4%91%EA%B4%84%ED%98%B8-%EB%8C%80%EA%B4%84%ED%98%B8\" aria-label=\"2 중괄호 대괄호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 중괄호, 대괄호</h3>\n<ul>\n<li>\n<p>중괄호는 경로에 포함되지 않으며 생략된다</p>\n<ul>\n<li>예를 들어 (auth) 폴더의 login.js 파일은 경로가 ‘/login’으로 지정된다</li>\n</ul>\n</li>\n<li>\n<p>대괄호는 동적 경로 지정이 가능하다\n<br/></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token operator\">/</span>\n  ├─ index<span class=\"token punctuation\">.</span>js            <span class=\"token comment\">// 루트 경로 '/'</span>\n  ├─ about<span class=\"token punctuation\">.</span>js            <span class=\"token comment\">// '/about'</span>\n  ├─ <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>js             <span class=\"token comment\">// '/:id' (동적 경로)</span>\n  ├─ board<span class=\"token operator\">/</span>\n  │    ├─ index<span class=\"token punctuation\">.</span>js       <span class=\"token comment\">// '/board'</span>\n  │    ├─ settings<span class=\"token punctuation\">.</span>js    <span class=\"token comment\">// '/board/settings'</span>\n  │    └─ profile<span class=\"token punctuation\">.</span>js     <span class=\"token comment\">// '/board/profile'</span>\n  └─ layout<span class=\"token punctuation\">.</span>js           <span class=\"token comment\">// 공통 레이아웃</span>\n</code></pre></div>\n<br/>\n<h3 id=\"3-기능-및-장점\" style=\"position:relative;\"><a href=\"#3-%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%EC%9E%A5%EC%A0%90\" aria-label=\"3 기능 및 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 기능 및 장점</h3>\n<ul>\n<li>코드 분할 : 페이지 단위의 코드를 분할해서 작성 할 수 있다</li>\n<li>deep linking: 딥링크가 자동으로 가능</li>\n<li>SEO 친화적</li>\n<li>Tab navigator, Stack navigator 등 다양한 네비게이션 옵션 사용 가능</li>\n</ul>\n<br/>\n<h3 id=\"4-router-object-종류\" style=\"position:relative;\"><a href=\"#4-router-object-%EC%A2%85%EB%A5%98\" aria-label=\"4 router object 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. router object 종류</h3>\n<ul>\n<li>\n<p>navigate : 이미 같은 경로에 있는 경우 새로운 화면을 추가하지 않고, 기존화면 재사용</p>\n</li>\n<li>\n<p>push : 스택에 새로운 화면을 추가. 동일 경로로 push하면 스택 쌓임 -> 주의: 여러번 같은 경로 누르면 동일화면이 여러번 중첩돼서 back이 계속 눌러질 수 있음</p>\n</li>\n<li>\n<p>replace: 현재 화면을 새로운 화면으로 교체, 뒤로가기 스택에서 기존화면 제거 (로그인 후 홈화면으로 이동할 때 사용)</p>\n</li>\n<li>\n<p>back: 뒤로가기</p>\n</li>\n<li>\n<p>canGoBack: 뒤로 갈 화면이 있는지 판별해줌 boolean 타입</p>\n</li>\n<li>\n<p>setParams: 현재화면에서 url에 포함된 파라미터를 업데이트함, 주로 동적 데이터 업데이트 할 때 사용, 예를 들어 filter 처리를 한다고 하면 router.setParams({ filter: ‘new’ }) 호출하면 url에 ‘?filter=new’를 추가되거나 filter 파라미터가 업데이트 된다. 이로 인해 화면이 리렌더링되고 ui가 새로 만들어짐<br/>\n화면전환이 발생하지 않고, 화면의 상태만 바뀜</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"5-setparams-vs-push-replace\" style=\"position:relative;\"><a href=\"#5-setparams-vs-push-replace\" aria-label=\"5 setparams vs push replace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. setParams vs push, replace</h3>\n<ul>\n<li>\n<p>setParams:</p>\n<ol>\n<li>URL의 파라미터만 변경. 화면 전환 없음</li>\n<li>현재 화면에 머무르면서 동적 데이터를 업데이트할 때 사용</li>\n</ol>\n</li>\n<li>\n<p>push:</p>\n<ol>\n<li>새로운 화면을 스택에 추가하여 이동</li>\n<li>네비게이션 스택이 쌓이므로 뒤로 가기 기능 유지</li>\n</ol>\n</li>\n<li>\n<p>replace:</p>\n<ol>\n<li>현재 화면을 새로운 화면으로 대체</li>\n<li>뒤로 가기를 눌러도 대체된 이전 화면으로 돌아갈 수 없음</li>\n</ol>\n</li>\n</ul>\n<br/>\n<h3 id=\"6-slot\" style=\"position:relative;\"><a href=\"#6-slot\" aria-label=\"6 slot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Slot</h3>\n<ul>\n<li>경로만든 폴더 안에 _layout.tsx는 이런식으로 구성한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Slot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'expo-router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Slot <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 Slot은 <strong>자식 경로를 렌더링</strong>한다. childern과 비슷함</p>\n<h3 id=\"7-stack\" style=\"position:relative;\"><a href=\"#7-stack\" aria-label=\"7 stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Stack</h3>\n<ul>\n<li>stack에 따라서 ios, android의 애니매이션이 적용되는데 (iosr경우 오른쪽에서 애니메이션 나오는거) 예를 들어\n폴더 구조가 app > _layout.tsx, index.tsx, details.tsx가 있다면</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//_layout.tsx</span>\n\n<span class=\"token operator\">&lt;</span>Stack\n  screenOptions<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">headerShown</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">statusBarColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'transparent'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//공통 헤더바 옵션</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Stack<span class=\"token punctuation\">.</span>Screen name<span class=\"token operator\">=</span><span class=\"token string\">\"home\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">//index.tsx 인데 이름이 home 스택의 첫번째 경로</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Stack<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//index.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Stack<span class=\"token punctuation\">.</span>Screen <span class=\"token comment\">// 이렇게하면 해더바 동적으로 구성 가능</span>\n        options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'My home'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">headerStyle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#f4511e'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">headerTintColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">headerTitleStyle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">fontWeight</span><span class=\"token operator\">:</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Home Screen<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pathname</span><span class=\"token operator\">:</span> <span class=\"token string\">'details'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bacon'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Go to Details<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//details.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Details</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useLocalSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 파라미터 가져오기</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Stack<span class=\"token punctuation\">.</span>Screen\n        options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text\n        onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          router<span class=\"token punctuation\">.</span><span class=\"token function\">setParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Updated'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        Update the title\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>❓ 근데 Stack.Screen 이 screen 만드는거 아닌가? Stack.Screen이 헤더로만 사용이 가능한건가? 내 원래 예상은 이거였다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//_layout.tsx</span>\n\n<span class=\"token operator\">&lt;</span>Stack\n  screenOptions<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">headerShown</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">statusBarColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'transparent'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//공통 헤더바 옵션</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Stack<span class=\"token punctuation\">.</span>Screen name<span class=\"token operator\">=</span><span class=\"token string\">\"home\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">//index.tsx 인데 이름이 home 스택의 첫번째 경로</span>\n  <span class=\"token operator\">&lt;</span>Stack<span class=\"token punctuation\">.</span>Screen name<span class=\"token operator\">=</span><span class=\"token string\">\"details\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">//index.tsx 인데 이름이 home 스택의 첫번째 경로</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Stack<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// 한번에 스크린 넣기 -> Stack.Screen은 스크린 만들어주는 거니깐</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#expo-router%EB%9E%80\">expo-router란?</a></p>\n<ul>\n<li><a href=\"#1-%ED%8C%8C%EC%9D%BC%EA%B8%B0%EB%B0%98%EC%9D%98-%EB%9D%BC%EC%9A%B0%ED%8C%85\">1. 파일기반의 라우팅</a></li>\n<li><a href=\"#2-%EC%A4%91%EA%B4%84%ED%98%B8-%EB%8C%80%EA%B4%84%ED%98%B8\">2. 중괄호, 대괄호</a></li>\n<li><a href=\"#3-%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%EC%9E%A5%EC%A0%90\">3. 기능 및 장점</a></li>\n<li><a href=\"#4-router-object-%EC%A2%85%EB%A5%98\">4. router object 종류</a></li>\n<li><a href=\"#5-setparams-vs-push-replace\">5. setParams vs push, replace</a></li>\n<li><a href=\"#6-slot\">6. Slot</a></li>\n<li><a href=\"#7-stack\">7. Stack</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"expo-router란? 1. 파일기반의 라우팅 expo-router는 파일기반의 라우팅으로, 파일과 디렉토리에 따라서 자동으로 경로가 생성된다 예를 들어 ‘app/home.js’ 파일이라면 ‘/home’ 경로가 된다. 2. 중괄호, 대괄호 중괄호는 경로에 포함되지 않으며 생략된다 예를 들어 (auth) 폴더의 login.js 파일은 경로가 ‘/login’으로 지정된다 대괄호는 동적 경로 지정이 가능하다\n 3. 기능 및 장점 코드 분할 : 페이지 단위의 코드를 분할해서 작성 할 수 있다 deep linking: 딥링크가 자동으로 가능 SEO 친화적 Tab navigator, Stack navigator 등 다양한 네비게이션 옵션 사용 가능 4. router object 종류 navigate : 이미 같은 경로에 있는 경우 새로운 화면을 추가하지 않고, 기존화면 재사용 push : 스택에 새로운 화면을 추가. 동일 경로로 push하면 스택 쌓임 -> 주의: 여러번 같은 경로 누르면 …","frontmatter":{"date":"August 28, 2024","title":"Expo-router","categories":"expo","author":"unoung","emoji":"🖥"},"fields":{"slug":"/study-expo-1/"}},"next":{"id":"d95f4f2e-6e40-5d8a-9256-5188002e0864","html":"<br/>\n<h2 id=\"자료구조data-structure란\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0data-structure%EB%9E%80\" aria-label=\"자료구조data structure란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료구조(Data Structure)란?</h2>\n<ul>\n<li>\n<p>자료구조는 다수의 **자료(data)**를 담기 위한 구조다.</p>\n</li>\n<li>\n<p>데이터의 수가 많아질수록 효율적인 자료구조가 필요하다.</p>\n</li>\n<li>\n<p><strong>성능비교:</strong> 자료구조/알고리즘의 <strong>성능 측정 방법</strong>에 대해 이해할 필요가 있다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"1-선형-구조linear-data-structure\" style=\"position:relative;\"><a href=\"#1-%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0linear-data-structure\" aria-label=\"1 선형 구조linear data structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 선형 구조(linear data structure)</h3>\n<blockquote>\n<p>하나의 데이터 뒤에 다른 데이터가 하나 존재하는 자료구조 <br/>\n데이터가 일렬로 연속적으로 연결되어 있다.</p>\n</blockquote>\n<ul>\n<li>배열 (array)</li>\n<li>연결 리스트(linked list)</li>\n<li>스택(stack)</li>\n<li>큐(queue)</li>\n</ul>\n<br/>\n<h3 id=\"2-비선형-구조non-linear-data-structure\" style=\"position:relative;\"><a href=\"#2-%EB%B9%84%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0non-linear-data-structure\" aria-label=\"2 비선형 구조non linear data structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 비선형 구조(non-linear data structure)</h3>\n<blockquote>\n<p>하나의 데이터 뒤에 다른 데이터가 여러 개 올 수 있는 자료구조 <br/>\n데이터가 일직선상으로 연결되어 있지 않아도 된다.</p>\n</blockquote>\n<ul>\n<li>트리(tree)</li>\n<li>그래프(graph)</li>\n</ul>\n<br/>\n<h2 id=\"프로그램의-성능-측정-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"프로그램의 성능 측정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램의 성능 측정 방법</h2>\n<ul>\n<li>\n<p><strong>시간 복잡도(time complexity)</strong> : 알고리즘에 사용되는 연산횟수를 측정</p>\n</li>\n<li>\n<p><strong>공간 복잡도(space complexity)</strong> : 알고리즘에 사용되는 메모리 양을 측정</p>\n</li>\n<li>\n<p>공간을 많이 사용하는 대신 시간을 단축하는 방법이 흔히 사용된다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"big-o-표기법\" style=\"position:relative;\"><a href=\"#big-o-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"big o 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O 표기법</h3>\n<ul>\n<li>복잡도를 표현할 때는 <strong>Big-O</strong> 표기법을 사용한다.</li>\n</ul>\n<blockquote>\n<p>특정한 알고리즘이 얼마나 효율적인지 수치적으로 표현 가능 <br/>\n가장 빠르게 증가하는 항만을 고려하는 표기법이다.</p>\n</blockquote>\n<br/>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//다음 알고리즘은 𝑂(𝑛)의 시간 복잡도를 가진다.</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> summary <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  summary <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 45</span>\n\n<span class=\"token comment\">//다음 알고리즘은 𝑂(𝑛2)의 시간 복잡도를 가진다.</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> X </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i <span class=\"token operator\">*</span> j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n1 X 1= 1 \n1 X 2= 2 \n...\n9 X 8 = 72 \n9 X 9 = 81\n\n*/</span></code></pre></div>\n<br/>\n<br/>\n<ul>\n<li>일반적으로 연산횟수가 10억을 넘어가면 1초 이상의 시간이 소요된다.</li>\n</ul>\n<blockquote>\n<p>𝑛이 1,000일 때를 고려해 보자.</p>\n<ul>\n<li>𝑂(𝑛) :약1,000번의연산 <br/></li>\n<li>𝑂(𝑛𝑙𝑜𝑔𝑛) : 약 10,000번의 연산 <br/></li>\n<li>𝑂(𝑛2) : 약 1,000,000번의 연산 <br/></li>\n<li>𝑂(𝑛3) : 약 1,000,000,000번의 연산 <br/></li>\n</ul>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0data-structure%EB%9E%80\">자료구조(Data Structure)란?</a></p>\n<ul>\n<li><a href=\"#1-%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0linear-data-structure\">1. 선형 구조(linear data structure)</a></li>\n<li><a href=\"#2-%EB%B9%84%EC%84%A0%ED%98%95-%EA%B5%AC%EC%A1%B0non-linear-data-structure\">2. 비선형 구조(non-linear data structure)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95-%EB%B0%A9%EB%B2%95\">프로그램의 성능 측정 방법</a></p>\n<ul>\n<li><a href=\"#big-o-%ED%91%9C%EA%B8%B0%EB%B2%95\">Big-O 표기법</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 20, 2023","title":"자료구조(Data Structure)","categories":"알고리즘","author":"unoung","emoji":"🖥"},"fields":{"slug":"/study-algorithms-1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://unoung.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/study-expo-1/","nextSlug":"/study-algorithms-1/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}